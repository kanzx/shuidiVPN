package shuidiVPN

import (
	"encoding/base64"
	"errors"
	"math/rand"
	"strings"
	"time"
)

/**
由256个 byte 组成的密钥数组，由 0～255 这256个数字组成，第I个的值不能等于I
例如以下为一个合法的密钥(上为索引，下为值)：
| 0	 | 1 | 2| 3 | 4 | 5 |6	7	8	9	10	11	12	13	14	15	16	17	18	19	20	21	22	23	24	25	26	27	28	29	30	31	32	33	34	35	36	37	38	39	40	41	42	43	44	45	46	47	48	49	50	51	52	53	54	55	56	57	58	59	60	61	62	63	64	65	66	67	68	69	70	71	72	73	74	75	76	77	78	79	80	81	82	83	84	85	86	87	88	89	90	91	92	93	94	95	96	97	98	99	100	101	102	103	104	105	106	107	108	109	110	111	112	113	114	115	116	117	118	119	120	121	122	123	124	125	126	127	128	129	130	131	132	133	134	135	136	137	138	139	140	141	142	143	144	145	146	147	148	149	150	151	152	153	154	155	156	157	158	159	160	161	162	163	164	165	166	167	168	169	170	171	172	173	174	175	176	177	178	179	180	181	182	183	184	185	186	187	188	189	190	191	192	193	194	195	196	197	198	199	200	201	202	203	204	205	206	207	208	209	210	211	212	213	214	215	216	217	218	219	220	221	222	223	224	225	226	227	228	229	230	231	232	233	234	235	236	237	238	239	240	241	242	243	244	245	246	247	248	249	250	251	252	253	254	255
——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
|186|118|82|201|235|236|180	66	228	96	43	90	203	200	34	104	41	222	165	74	240	20	244	67	114	191	220	147	196	183	229	123	208	19	127	187	84	148	56	170	133	160	202	21	53	78	59	64	120	27	167	175	39	10	4	132	89	230	152	73	221	88	141	158	251	79	225	87	14	23	68	250	199	168	218	60	40	169	75	86	153	134	83	49	128	231	217	239	226	177	57	24	234	63	7	112	166	211	254	179	157	215	227	224	233	81	172	26	122	219	48	151	232	50	108	44	0	192	65	76	109	252	248	47	154	33	209	115	31	15	45	206	247	124	77	8	182	144	1	72	131	52	245	198	238	5	188	116	55	216	155	2	178	189	162	136	243	184	58	69	70	99	36	25	35	174	195	18	205	30	190	142	210	113	145	101	97	161	100	91	242	138	93	171	98	237	212	255	80	102	119	204	107	105	111	11	29	146	129	117	135	176	163	207	103	22	246	125	150	106	126	197	249	62	51	193	32	3	110	46	85	71	159	139	12	164	95	121	140	241	253	130	173	213	54	143	16	94	9	61	156	214	28	17	37	42	181	149	185	223	92	38	13	194	6	137

如果原数据为 [5,0,1,2,3]，则采用以上密钥加密后变成 [236,186,118,82,201]。
如果加密后的数据为 [186,118,82,201,235]，则采用以上密钥解密得到的原数据为 [0,1,2,3,4]
*/

const PasswordLen = 256

type Password [PasswordLen]byte

var ErrorPassword = errors.New("不合法的密码")

func init() {
	// 更新随机种子，防止生成一样的随机密码
	rand.Seed(time.Now().Unix())
}

// 产生 256个byte随机组合的 密码，最后会使用base64编码为字符串存储在配置文件中
// 不能出现任何一个重复的byte位，必须是 0-255 组成，并且都需要包含
func RandPassword() string {
	// 更新随机种子，防止生成一样的随机密码
	intArr := rand.Perm(PasswordLen)
	password := &Password{}
	for i, v := range intArr {
		password[i] = byte(v)
		if i == v {
			// 确保不会出现如何一个byte位出现重复
			return RandPassword()
		}
	}

	return base64.StdEncoding.EncodeToString(password[:])
}

func RandPassword2() *Password {
	// 更新随机种子，防止生成一样的随机密码
	intArr := rand.Perm(PasswordLen)
	password := &Password{}
	for i, v := range intArr {
		password[i] = byte(v)
		if i == v {
			// 确保不会出现如何一个byte位出现重复
			return RandPassword2()
		}
	}

	return password
}

// 解析采用base64编码的字符串获取密码
func ParsePassword(passwordString string) (*Password, error) {
	bs, err := base64.StdEncoding.DecodeString(strings.TrimSpace(passwordString))
	if err != nil || len(bs) != PasswordLen {
		return nil, ErrorPassword
	}
	password := Password{}
	copy(password[:], bs)
	bs = nil
	return &password, nil
}

func Base64Password(password []byte) string {
	return base64.StdEncoding.EncodeToString(password[:])
}